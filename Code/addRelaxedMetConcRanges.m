function rel_model = addRelaxedMetConcRanges(model,ids,x_lb,x_ub)
%% rel_model = addRelaxedMetConcRanges(model,ids,x_lb,x_ub)
% Add relaxation terms to each metabolite concentration range of the given
% metabolite ids.
% 
% (I)   x >= x(min) - e(-)
% (II)  x <= x(max) + e(+)
% 
% These replace the default lower and upper bounds.
% 
% INPUT:
% struct model:                 TFA model generated by matFFA toolbox
% cellstr ids:                  ids of metabolites for which relaxed bounds
%                               should be added
% double x_lb,x_ub:             lower and upper bounds of metabolite
%                               concentration ranges (log-transformed)
% OUTPUT:
% struct rel_model:             TFA model with relaxed metabolite
%                               concentration range constraints

N_IDS = numel(ids);
N_VARS = size(model.A,2);

% check input
assert(N_IDS==numel(x_lb)&N_IDS==numel(x_ub),'ID and LB/UB dimensions do not match')

% match metabolite IDs to variable names in the TFA model
id_match = cellfun(@(x)find(ismember(model.varNames,x)),ids,'un',0);
id_match(cellfun(@isempty,id_match)) = {'NaN'};
id_match = cell2mat(id_match);

N_EPS = 2*sum(~isnan(id_match));

A_add = zeros(N_EPS,N_VARS+N_EPS);
rhs_add = zeros(N_EPS,1);
csense_add = repelem({'<'},N_EPS,1);
cnames_add = strcat(repelem(ids,2), repmat({'_relaxed_LB'; '_relaxed_UB'},N_EPS/2,1));
vnames_add = [strcat('EPS_MINUS_', ids(~isnan(id_match))); strcat('EPS_PLUS_', ids(~isnan(id_match)))];
vtypes_add = repelem({'C'},N_EPS,1);

c = 0;
for i=1:N_IDS
    
    % fprintf('ID: %s',ids{i})
    
    % find column index of metabolite ID   
    if isnan(id_match(i))
        fprintf('ID: %s',ids{i})
        fprintf('\t [ID not found - skipping]\n')
    else
        c = c + 1;
        % fprintf('\t [found - adding constraint]\n')

        row_idx = [2*(c-1)+1 2*c];
        A_add(row_idx(1),[id_match(i) N_VARS+c]) = [-1 -1]; % e(-)
        A_add(row_idx(2),[id_match(i) N_VARS+N_EPS/2+c]) = [1 -1]; % e(+)
        rhs_add(row_idx) = [-x_lb(i); x_ub(i)];
    end
end

% add new constraints to model
rel_model = model;
rel_model.A = [model.A zeros(size(model.A,1),N_EPS); A_add];
rel_model.rhs = [model.rhs; rhs_add];
rel_model.constraintType = [model.constraintType; csense_add];
rel_model.constraintNames = [model.constraintNames; cnames_add];
rel_model.varNames = [model.varNames; vnames_add];
rel_model.vartypes = [model.vartypes; vtypes_add];
rel_model.var_lb = [model.var_lb; zeros(N_EPS,1)];
rel_model.var_ub = [model.var_ub; 50*ones(N_EPS,1)];
rel_model.f = [model.f; zeros(N_EPS,1)];

% revert upper and lower bounds to default values
rel_model.var_lb(id_match(~isnan(id_match))) = log(min(model.CompartmentData.compMinConc));
rel_model.var_ub(id_match(~isnan(id_match))) = log(max(model.CompartmentData.compMaxConc));

end